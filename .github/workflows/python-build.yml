# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build

on:
  release:
    types: [published]

jobs:
  deploy:
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.11', '3.12', '3.13' ]
        os: [ macos-14, windows-latest ]

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
    - name: Clone Amulet-Game
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        pip cache purge
        python -m pip install --upgrade pip
        pip install build twine

    - name: Clone Amulet-Compiler-Version
      uses: actions/checkout@v4
      with:
        repository: 'Amulet-Team/Amulet-Compiler-Version'
        ref: '1.0'
        path: 'build/pylib/Amulet-Compiler-Version'

    - name: Build Amulet-Compiler-Version
      env:
        BUILD_SPECIALISED: 1
      run: |
        python -m build build/pylib/Amulet-Compiler-Version

    - name: Publish Amulet-Compiler-Version
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.AMULET_COMPILER_VERSION_PYPI_PASSWORD }}
      run: |
        twine upload build/pylib/Amulet-Compiler-Version/dist/* --skip-existing

    - name: Install Amulet-Compiler-Version and get __version__
      run: |
        python -m pip install build/pylib/Amulet-Compiler-Version/dist/amulet_compiler_version-*.whl
        version=$(python -c "import amulet_compiler_version; print(amulet_compiler_version.__version__)")
        echo "AMULET_COMPILER_VERSION=$version" >> "$GITHUB_ENV"

    - name: Get Amulet-NBT Requirement
      run: |
        amulet_nbt_req=$(python -c "import requirements; print(requirements.AMULET_NBT_REQUIREMENT)")
        echo "AMULET_NBT_REQUIREMENT=$amulet_nbt_req" >> "$GITHUB_ENV"

    - name: Install Amulet-NBT
      id: install_amulet_nbt
      continue-on-error: true
      run: |
        python -m pip install --only-binary amulet-compiler-version,amulet-nbt amulet-compiler-version==$AMULET_COMPILER_VERSION amulet-nbt$AMULET_NBT_REQUIREMENT

    - name: Build Amulet-NBT
      if: steps.install_amulet_nbt.outcome == 'failure'
      env:
        AMULET_FREEZE_COMPILER: 1
      run: |
        python -m pip wheel --wheel-dir build/pylib/Amulet-NBT/dist --no-deps --no-binary amulet-nbt amulet-nbt$AMULET_NBT_REQUIREMENT

    - name: Publish Amulet-NBT
      if: steps.install_amulet_nbt.outcome == 'failure'
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.AMULET_NBT_PYPI_PASSWORD }}
      run: |
        twine upload build/pylib/Amulet-NBT/dist/* --skip-existing

    - name: Install Amulet-NBT
      if: steps.install_amulet_nbt.outcome == 'failure'
      run: |
        python -m pip install build/pylib/Amulet-NBT/dist/amulet_nbt-*.whl

    - name: Get Amulet-NBT version
      run: |
        version=$(python -c "import amulet.nbt; print(amulet.nbt.__version__)")
        echo "AMULET_NBT_VERSION=$version" >> "$GITHUB_ENV"
        
    - name: Get Amulet-Core Requirement
      run: |
        amulet_core_req=$(python -c "import requirements; print(requirements.AMULET_CORE_REQUIREMENT)")
        echo "AMULET_CORE_REQUIREMENT=$amulet_core_req" >> "$GITHUB_ENV"

    - name: Install Amulet-Core
      id: install_amulet_core
      continue-on-error: true
      run: |
        python -m pip install --only-binary amulet-compiler-version,amulet-nbt,amulet-core amulet-compiler-version==$AMULET_COMPILER_VERSION amulet-nbt$AMULET_NBT_REQUIREMENT amulet-core$AMULET_CORE_REQUIREMENT

    - name: Build Amulet-Core
      if: steps.install_amulet_core.outcome == 'failure'
      env:
        AMULET_FREEZE_COMPILER: 1
      run: |
        python -m pip wheel --wheel-dir build/pylib/Amulet-Core/dist --no-deps --no-binary amulet-core amulet-core$AMULET_CORE_REQUIREMENT

    - name: Publish Amulet-Core
      if: steps.install_amulet_core.outcome == 'failure'
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.AMULET_CORE_PYPI_PASSWORD }}
      run: |
        twine upload build/pylib/Amulet-Core/dist/* --skip-existing

    - name: Install Amulet-Core
      if: steps.install_amulet_core.outcome == 'failure'
      run: |
        python -m pip install build/pylib/Amulet-Core/dist/amulet_core-*.whl

    - name: Get Amulet-Core version
      run: |
        version=$(python -c "import amulet.core; print(amulet.core.__version__)")
        echo "AMULET_CORE_VERSION=$version" >> "$GITHUB_ENV"

    - name: Build Amulet-Game
      env:
        AMULET_FREEZE_COMPILER: 1
      run: |
        python -m build .

    - name: Publish Amulet-Game
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.AMULET_GAME_PYPI_PASSWORD }}
      run: |
        twine upload dist/* --skip-existing
